import os
import re
import fitz  # PyMuPDF
import spacy
from faker import Faker
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter

# Load spaCy model
nlp = spacy.load("en_core_web_sm")

# Initialize Faker
fake = Faker()

# Define input and output folders
input_folder = 'FolderA'
output_folder = 'FolderB'

if not os.path.exists(output_folder):
    os.makedirs(output_folder)

def extract_text_from_pdf(pdf_path):
    """Extract text from a PDF file."""
    with fitz.open(pdf_path) as pdf_document:
        text = ""
        for page_num in range(pdf_document.page_count):
            page = pdf_document[page_num]
            text += page.get_text()
    return text

def mask_pii(text):
    """Mask PII in the given text."""
    doc = nlp(text)
    masked_text = text
    
    # Mask names and addresses
    for ent in doc.ents:
        if ent.label_ in ['PERSON', 'GPE', 'LOC']:
            fake_value = fake.name() if ent.label_ == 'PERSON' else '[MASKED]'
            masked_text = masked_text.replace(ent.text, fake_value)
    
    # Mask SSN/Aadhar numbers using regex
    ssn_pattern = r'\b\d{3}-\d{2}-\d{4}\b'  # Pattern for SSN (XXX-XX-XXXX)
    aadhar_pattern = r'\b\d{4} \d{4} \d{4}\b'  # Pattern for Aadhar (XXXX XXXX XXXX)
    masked_text = re.sub(ssn_pattern, '[SSN MASKED]', masked_text)
    masked_text = re.sub(aadhar_pattern, '[AADHAR MASKED]', masked_text)
    
    return masked_text

def create_pdf_from_text(text, pdf_path):
    """Create a PDF file from text."""
    c = canvas.Canvas(pdf_path, pagesize=letter)
    width, height = letter
    c.setFont("Helvetica", 12)
    y = height - 40
    for line in text.split('\n'):
        if y < 40:
            c.showPage()
            c.setFont("Helvetica", 12)
            y = height - 40
        c.drawString(40, y, line)
        y -= 14
    c.save()

def process_pdfs(input_folder, output_folder):
    """Process PDF files to mask PII and save to a new folder."""
    for filename in os.listdir(input_folder):
        if filename.endswith('.pdf'):
            input_path = os.path.join(input_folder, filename)
            output_path = os.path.join(output_folder, filename)
            
            # Extract text from PDF
            text = extract_text_from_pdf(input_path)
            
            # Mask PII in the text
            masked_text = mask_pii(text)
            
            # Create a new PDF with masked text
            create_pdf_from_text(masked_text, output_path)

# Process all PDFs in the input folder
process_pdfs(input_folder, output_folder)
